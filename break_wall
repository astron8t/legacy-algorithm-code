import sys
from collections import deque

n, m = map(int, sys.stdin.readline().rstrip().split())

graph = [list(map(int, sys.stdin.readline().rstrip())) for _ in range(n)]
visited = [[[0] * 2 for _ in range(m)] for _ in range(n)]

#start 는 3 index 리스트
def bfs(graph, start, visited):
    visited[start[0]][start[1]][0] = 1
    que = deque([start])
    dx = [1, -1, 0, 0]
    dy = [0, 0, 1, -1]
    while que:
        v = que.popleft()
        if not v[2]:
            for i in range(4):
                x = v[0] + dx[i]
                y = v[1] + dy[i]
                if 0 <= x < n:
                    if 0 <= y < m:
                        if graph[x][y] == 0:
                            if not visited[x][y][0]:
                                que.append([x, y, 0])
                                visited[x][y][0] += (visited[v[0]][v[1]][0] + 1)
                        else:
                            if not visited[x][y][1]:
                                que.append([x, y, 1])
                                visited[x][y][1] += (visited[v[0]][v[1]][0] + 1)

        if v[2]:
            for i in range(4):
                x = v[0] + dx[i]
                y = v[1] + dy[i]
                if 0 <= x < n:
                    if 0 <= y < m:
                        if graph[x][y] == 0:
                            if not visited[x][y][1]:
                                que.append([x, y, 1])
                                visited[x][y][1] += (visited[v[0]][v[1]][1] + 1)


bfs(graph, [0, 0, 0], visited)
a, b = visited[n-1][m-1]

if not a and not b:
    print(-1)
elif not a:
    print(b)
elif not b:
    print(a)
else:
    print(min(a, b))
